// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source=auth.go -destination=middleware_mock/auth_mock.go -package middleware_mock
//

// Package middleware_mock is a generated GoMock package.
package middleware_mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthMiddleware is a mock of AuthMiddleware interface.
type MockAuthMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMiddlewareMockRecorder
}

// MockAuthMiddlewareMockRecorder is the mock recorder for MockAuthMiddleware.
type MockAuthMiddlewareMockRecorder struct {
	mock *MockAuthMiddleware
}

// NewMockAuthMiddleware creates a new mock instance.
func NewMockAuthMiddleware(ctrl *gomock.Controller) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{ctrl: ctrl}
	mock.recorder = &MockAuthMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMiddleware) EXPECT() *MockAuthMiddlewareMockRecorder {
	return m.recorder
}

// CheckToken mocks base method.
func (m *MockAuthMiddleware) CheckToken() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockAuthMiddlewareMockRecorder) CheckToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockAuthMiddleware)(nil).CheckToken))
}

// DeleteCookie mocks base method.
func (m *MockAuthMiddleware) DeleteCookie(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCookie", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCookie indicates an expected call of DeleteCookie.
func (mr *MockAuthMiddlewareMockRecorder) DeleteCookie(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockAuthMiddleware)(nil).DeleteCookie), ctx)
}

// GetUserIDFromContext mocks base method.
func (m *MockAuthMiddleware) GetUserIDFromContext(ctx *gin.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromContext", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromContext indicates an expected call of GetUserIDFromContext.
func (mr *MockAuthMiddlewareMockRecorder) GetUserIDFromContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromContext", reflect.TypeOf((*MockAuthMiddleware)(nil).GetUserIDFromContext), ctx)
}

// SetJWTCookie mocks base method.
func (m *MockAuthMiddleware) SetJWTCookie(ctx *gin.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJWTCookie", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJWTCookie indicates an expected call of SetJWTCookie.
func (mr *MockAuthMiddlewareMockRecorder) SetJWTCookie(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJWTCookie", reflect.TypeOf((*MockAuthMiddleware)(nil).SetJWTCookie), ctx, userID)
}
